Prompt for Codex — Generate the complete ServiceRegistry project with Redis-based service storage. Do not ask any questions or require confirmations. Output must include everything and be fully functional. Assume nothing exists beforehand.

Project Name: ServiceRegistry

📁 Structure:
ServiceRegistry/
└── src/
    ├── ServiceRegistration.Client/       # NuGet-ready package to auto-register/deregister services
    ├── ServiceRegistry.Monitor/          # Minimal API backend that uses Redis to store service info
    └── ServiceRegistry.Dashboard/        # Blazor Server dashboard showing service statuses

🚫 Start from scratch.
- Do NOT rely on any pre-existing code, binaries, project files, or resources.
- All source code, configuration, and project files must be created fresh.

📦 1. ServiceRegistration.Client
- A .NET class library to be used as a NuGet package.
- Provides `IHostedService` that:
  - On startup, sends a POST to `/api/registry/register` with service name, instance ID, and health check URL.
  - On shutdown, sends a POST to `/api/registry/deregister`.
- Configuration is injected via `ServiceRegistrationOptions`.
- Adds extension method `AddServiceRegistration(...)` for easy integration.

⚙️ 2. ServiceRegistry.Monitor
- Minimal ASP.NET Core API (WebApplication-based).
- Routes:
  - POST `/api/registry/register`: Adds or updates a service in Redis.
  - POST `/api/registry/deregister`: Removes a service from Redis.
  - GET `/api/registry/all`: Pings each registered service’s `HealthCheckUrl` and updates Redis entries.
- Uses StackExchange.Redis (connect to `localhost:6379`).
- Health check responses are expected to return JSON with: `status`, `version`, `environment`.
- If ping fails or times out (2 seconds), service status is marked as `"Unreachable"`.

🖥️ 3. ServiceRegistry.Dashboard
- A Blazor Server app.
- On page load, calls `/api/registry/all` to retrieve registered services.
- Displays each service in a card layout:
  - `ServiceName`
  - `Status` (green for Healthy, red for Unreachable)
  - `Version`
  - `Environment`
  - `LastChecked`
  - `HealthCheckUrl`
- Uses clean styling. Tailwind is optional.
- Responsive and production-ready.

📝 4. README.md
- Describe the full architecture.
- List all projects with purpose and usage.
- Include setup instructions for local development.
- Mention that Redis must be running at `localhost:6379`.

🗂️ 5. .gitignore
- Standard .NET ignores:
  - `bin/`, `obj/`, `.vs/`, `.vscode/`, `*.user`, `*.suo`

✅ Use .NET 8 (assume it’s installed).
✅ No interactive setup.
✅ No zip, no binaries, no placeholders.
✅ All projects must be valid, buildable, and logically complete.
